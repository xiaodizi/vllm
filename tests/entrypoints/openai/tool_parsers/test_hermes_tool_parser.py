# SPDX-License-Identifier: Apache-2.0
import pytest
from transformers import AutoTokenizer

from tests.entrypoints.openai.tool_parsers.utils import (run_tool_extraction_hermes)
from vllm.entrypoints.openai.protocol import FunctionCall
from vllm.entrypoints.openai.tool_parsers import ToolParserManager

# Content that is not streamed
NO_STREAM_FUNCTION_OUTPUT = "好的，用户现在要研发一个5MW的燃气轮机，需要确定总体参数，比如空气流量、压气机压比、转速、燃烧室出口温度、压气机级数和支点布局。首先，我需要回忆一下燃气轮机的基本设计参数和它们之间的关系。\n\n首先，燃气轮机的功率主要由热力学循环参数决定，比如压比、温度和空气流量。5MW属于中小型燃气轮机，可能用于分布式能源或航改型发动机。我需要先确定这些参数的大致范围。\n\n空气流量方面，通常燃气轮机的空气流量（ṁa）可以通过功率估算。根据经验，每兆瓦大约需要1-3 kg/s的空气流量。假设5MW的话，可能在5-15 kg/s之间。但具体数值需要结合其他参数。\n\n压气机压比（πc）是关键参数，通常中小型燃气轮机的压比在8-20之间。假设选择12的压比，这样可以在效率和结构之间取得平衡。\n\n转速方面，燃气轮机的转速较高，通常在8000-15000 rpm之间。考虑到5MW的规模，可能选择10000 rpm左右，这样可以平衡机械强度和效率。\n\n燃烧室出口温度（T3）是涡轮入口温度，直接影响效率和材料选择。现代燃气轮机的涡轮前温度可能在1400-1600K左右。假设1500K，但需要考虑材料限制，比如镍基合金的耐温能力。\n\n压气机级数需要根据压比和压气机的级效率来确定。假设每级的压比约为1.3，那么总级数大约是log(πc)/log(1.3) ≈ log(12)/log(1.3) ≈ 7-8级。可能需要8级压气机。\n\n支点布局方面，燃气轮机的支点通常布置在压气机和涡轮之间，以减少振动。常见的布局是两端支撑，或者中间加一个支点。对于中小型机，可能采用双支撑结构，比如在压气机端和涡轮端各一个，或者中间加一个中间支点来提高刚度。\n\n不过，这些数值可能需要进一步验证。比如，是否需要调用互联网搜索来确认这些参数的典型值？比如，5MW燃气轮机的空气流量、压比等是否有标准数据？或者是否有类似案例？\n\n用户可能希望得到一个具体的例子，所以可能需要结合典型设计参数。例如，参考现有的5MW级燃气轮机，如GE的LM2500或类似型号，但LM2500可能更大，需要调整。或者查找学术资料中的设计案例。\n\n可能需要调用互联网搜索工具来查找5MW燃气轮机的设计参数，比如空气流量、压比等，确保给出的数值合理。例如，搜索“5MW燃气轮机设计参数”或“中小型燃气轮机典型参数”。\n\n假设搜索结果给出类似参数，比如空气流量约10 kg/s，压比12，转速10000 rpm，涡轮前温度1500K，压气机8级，支点双支撑。这样可以形成一个范例。\n\n需要确保各参数之间的热力学一致性，比如通过理想循环计算验证。例如，使用布雷顿循环公式计算理论功率，再调整效率参数得到实际功率是否接近5MW。\n\n可能还需要考虑压气机效率、涡轮效率等因素。例如，假设压气机效率0.85，涡轮效率0.9，燃烧效率0.98，散热损失等，但用户可能只需要总体参数，不需要详细热力计算。\n\n总结下来，给出一个范例参数，同时说明这些参数的选择依据，并建议进一步详细设计时进行热力循环分析和结构强度校核。\n</think>\n\n<tool_call>\n{\"name\": \"internet_search\", \"arguments\": {\"question\": \"5MW燃气轮机设计参数 空气流量 压气机压比 转速 燃烧室出口温度 压气机级数 支点布局\"}}\n</tool_call>\n\n"

EXPECTED_FUNCTION_CALL = FunctionCall(
    name='internet_search',
    arguments='{"question": "5MW燃气轮机设计参数 空气流量 压气机压比 转速 燃烧室出口温度 压气机级数 支点布局"}',
)

# Simulation stream output results
STREAM_FUNCTION_OUTPUT = ['好的', '，', '用户', '现在', '要', '研发', '一个', '5', 'MW', '的', '燃气', '轮', '机', '，', '需要', '确定', '总体',
                          '参数', '，', '比如', '空气', '流量', '、', '压', '气', '机', '压', '比', '、', '转', '速', '、', '燃烧', '室',
                          '出口', '温度', '、', '压', '气', '机', '级', '数', '和', '支', '点', '布局', '。', '首先', '，', '我', '需要',
                          '回忆', '一下', '燃气', '轮', '机', '的基本', '设计', '参数', '和', '它们', '之间的', '关系', '。\n\n', '首先', '，',
                          '燃气', '轮', '机', '的', '功率', '主要', '由', '热', '力学', '循环', '参数', '决定', '，', '比如', '压', '比', '、',
                          '温度', '和', '空气', '流量', '。', '5', 'MW', '属于', '中小型', '燃气', '轮', '机', '，', '可能', '用于', '分布式',
                          '能源', '或', '航', '改', '型', '发动机', '。', '我', '需要', '先', '确定', '这些', '参数', '的大', '致', '范围',
                          '。\n\n', '空气', '流量', '方面', '，', '通常', '燃气', '轮', '机', '的', '空气', '流量', '（', 'ṁ', 'a', '）',
                          '可以通过', '功率', '估算', '。', '根据', '经验', '，', '每', '兆', '瓦', '大约', '需要', '1', '-', '3', ' kg',
                          '/s', '的', '空气', '流量', '。', '假设', '5', 'MW', '的话', '，', '可能', '在', '5', '-', '1', '5', ' kg',
                          '/s', '之间', '。', '但', '具体', '数值', '需要', '结合', '其他', '参数', '。\n\n', '压', '气', '机', '压', '比',
                          '（', 'π', 'c', '）', '是', '关键', '参数', '，', '通常', '中小型', '燃气', '轮', '机', '的', '压', '比', '在',
                          '8', '-', '2', '0', '之间', '。', '假设', '选择', '1', '2', '的', '压', '比', '，', '这样', '可以在', '效率',
                          '和', '结构', '之间', '取得', '平衡', '。\n\n', '转', '速', '方面', '，', '燃气', '轮', '机', '的', '转', '速',
                          '较高', '，', '通常', '在', '8', '0', '0', '0', '-', '1', '5', '0', '0', '0', ' rpm', '之间', '。',
                          '考虑到', '5', 'MW', '的', '规模', '，', '可能', '选择', '1', '0', '0', '0', '0', ' rpm', '左右', '，',
                          '这样', '可以', '平衡', '机械', '强度', '和', '效率', '。\n\n', '燃烧', '室', '出口', '温度', '（', 'T', '3', '）',
                          '是', '涡', '轮', '入口', '温度', '，', '直接影响', '效率', '和', '材料', '选择', '。', '现代', '燃气', '轮', '机', '的',
                          '涡', '轮', '前', '温度', '可能', '在', '1', '4', '0', '0', '-', '1', '6', '0', '0', 'K', '左右', '。',
                          '假设', '1', '5', '0', '0', 'K', '，', '但', '需要', '考虑', '材料', '限制', '，', '比如', '镍', '基', '合金',
                          '的', '耐', '温', '能力', '。\n\n', '压', '气', '机', '级', '数', '需要', '根据', '压', '比', '和', '压', '气',
                          '机', '的', '级', '效率', '来', '确定', '。', '假设', '每', '级', '的', '压', '比', '约为', '1', '.', '3', '，',
                          '那么', '总', '级', '数', '大约', '是', 'log', '(', 'π', 'c', ')/', 'log', '(', '1', '.', '3', ')',
                          '', ' ≈', ' log', '(', '1', '2', ')/', 'log', '(', '1', '.', '3', ')', '', ' ≈', ' ', '7',
                          '-', '8', '级', '。', '可能', '需要', '8', '级', '压', '气', '机', '。\n\n', '支', '点', '布局', '方面', '，',
                          '燃气', '轮', '机', '的', '支', '点', '通常', '布置', '在', '压', '气', '机', '和', '涡', '轮', '之间', '，', '以',
                          '减少', '振动', '。', '常见的', '布局', '是', '两端', '支撑', '，', '或者', '中间', '加', '一个', '支', '点', '。',
                          '对于', '中小型', '机', '，', '可能', '采用', '双', '支撑', '结构', '，', '比如', '在', '压', '气', '机', '端', '和',
                          '涡', '轮', '端', '各', '一个', '，', '或者', '中间', '加', '一个', '中间', '支', '点', '来', '提高', '刚', '度',
                          '。\n\n', '不过', '，', '这些', '数值', '可能', '需要', '进一步', '验证', '。', '比如', '，', '是否', '需要', '调', '用',
                          '互联网', '搜索', '来', '确认', '这些', '参数', '的', '典型', '值', '？', '比如', '，', '5', 'MW', '燃气', '轮', '机',
                          '的', '空气', '流量', '、', '压', '比', '等', '是否有', '标准', '数据', '？', '或者', '是否有', '类似', '案例', '？\n\n',
                          '用户', '可能', '希望', '得到', '一个', '具体的', '例子', '，', '所以', '可能', '需要', '结合', '典型', '设计', '参数', '。',
                          '例如', '，', '参考', '现有的', '5', 'MW', '级', '燃气', '轮', '机', '，', '如', 'GE', '的', 'LM', '2', '5',
                          '0', '0', '或', '类似', '型号', '，', '但', 'LM', '2', '5', '0', '0', '可能', '更大', '，', '需要', '调整',
                          '。', '或者', '查找', '学术', '资料', '中的', '设计', '案例', '。\n\n', '可能', '需要', '调', '用', '互联网', '搜索',
                          '工具', '来', '查找', '5', 'MW', '燃气', '轮', '机', '的设计', '参数', '，', '比如', '空气', '流量', '、', '压', '比',
                          '等', '，', '确保', '给出', '的', '数值', '合理', '。', '例如', '，', '搜索', '“', '5', 'MW', '燃气', '轮', '机',
                          '设计', '参数', '”', '或', '“', '中小型', '燃气', '轮', '机', '典型', '参数', '”。\n\n', '假设', '搜索', '结果',
                          '给出', '类似', '参数', '，', '比如', '空气', '流量', '约', '1', '0', ' kg', '/s', '，', '压', '比', '1', '2',
                          '，', '转', '速', '1', '0', '0', '0', '0', ' rpm', '，', '涡', '轮', '前', '温度', '1', '5', '0', '0',
                          'K', '，', '压', '气', '机', '8', '级', '，', '支', '点', '双', '支撑', '。', '这样', '可以', '形成', '一个', '范',
                          '例', '。\n\n', '需要', '确保', '各', '参数', '之间的', '热', '力学', '一致性', '，', '比如', '通过', '理想', '循环',
                          '计算', '验证', '。', '例如', '，', '使用', '布', '雷', '顿', '循环', '公式', '计算', '理论', '功率', '，', '再', '调整',
                          '效率', '参数', '得到', '实际', '功率', '是否', '接近', '5', 'MW', '。\n\n', '可能', '还需要', '考虑', '压', '气',
                          '机', '效率', '、', '涡', '轮', '效率', '等因素', '。', '例如', '，', '假设', '压', '气', '机', '效率', '0', '.',
                          '8', '5', '，', '涡', '轮', '效率', '0', '.', '9', '，', '燃烧', '效率', '0', '.', '9', '8', '，', '散热',
                          '损失', '等', '，', '但', '用户', '可能', '只需要', '总体', '参数', '，', '不需要', '详细', '热', '力', '计算', '。\n\n',
                          '总结', '下来', '，', '给出', '一个', '范', '例', '参数', '，', '同时', '说明', '这些', '参数', '的选择', '依据', '，并',
                          '建议', '进一步', '详细', '设计', '时', '进行', '热', '力', '循环', '分析', '和', '结构', '强度', '校', '核', '。\n',
                          '</think>', '\n\n', '<tool_call>', '\n', '{"', 'name', '":', ' "', 'internet', '_search',
                          '",', ' "', 'arguments', '":', ' {"', 'question', '":', ' "', '5', 'MW', '燃气', '轮', '机', '设计',
                          '参数', '', '', ' 空', '气', '流量', '', '', ' 压', '气', '机', '压', '比', '', '', ' 转', '速', '', '',
                          ' 燃', '烧', '室', '出口', '温度', '', '', ' 压', '气', '机', '级', '数', '', ' 支', '点', '布局', '"}',
                          '}\n', '</tool_call>', '']

# Simulation stream output results, simplify the output content
STREAM_FUNCTION_OUTPUT_SIMPLIFICATION = ['<tool_call>', '\n', '{"', 'name', '":', ' "', 'internet', '_search', '",',
                                         ' "', 'arguments', '":', ' {"', 'question', '":', ' "', '5', 'MW', '燃气', '轮',
                                         '机', '设计', '参数', '', '', ' 空', '气', '流量', '', '', ' 压', '气', '机', '压', '比', '',
                                         '', ' 转', '速', '', '', ' 燃', '烧', '室', '出口', '温度', '', '', ' 压', '气', '机', '级',
                                         '数', '', ' 支', '点', '布局', '"}', '}\n', '</tool_call>', '']

TEST_CASES = [
    pytest.param(False,
                 NO_STREAM_FUNCTION_OUTPUT, EXPECTED_FUNCTION_CALL,
                 id="lei_test_streaming_01"),
    pytest.param(True,
                 STREAM_FUNCTION_OUTPUT_SIMPLIFICATION, EXPECTED_FUNCTION_CALL,
                 id="lei_test_streaming_02"),
    pytest.param(True,
                 STREAM_FUNCTION_OUTPUT_SIMPLIFICATION, EXPECTED_FUNCTION_CALL,
                 id="lei_test_streaming_03")
]


@pytest.mark.parametrize("streaming, model_output, expected_tool_calls",
                         TEST_CASES)
def test_tool_call(streaming: bool, model_output: list,
                   expected_tool_calls: list[FunctionCall]):
    tokenizer = AutoTokenizer.from_pretrained("/Data3/liwenjie/AI-ModelScope/QwQ-32B")

    tool_parser = ToolParserManager.get_tool_parser("hermes")(tokenizer)
    content, tool_calls = run_tool_extraction_hermes(tool_parser,
                                                     model_output,
                                                     streaming=streaming)
    # print(f"tool_calls: {tool_calls[0].type}")
    # print(f"expected_tool_calls: {expected_tool_calls}")

    assert tool_calls[0].type == "function"
    assert tool_calls[0].function == expected_tool_calls
